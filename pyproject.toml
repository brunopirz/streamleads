[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "streamleads"
version = "1.0.0"
description = "Sistema avançado de captura e gerenciamento de leads com automação inteligente"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Bruno", email = "bruno@streamleads.com"},
]
keywords = ["leads", "automation", "fastapi", "streamlit", "crm"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.0",
    "celery>=5.3.0",
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.0",
    "python-multipart>=0.0.6",
    "email-validator>=2.0.0",
    "phonenumbers>=8.13.0",
    "streamlit>=1.28.0",
    "plotly>=5.17.0",
    "pandas>=2.1.0",
    "requests>=2.31.0",
    "aiohttp>=3.8.0",
    "python-decouple>=3.8",
    "loguru>=0.7.0",
    "prometheus-client>=0.17.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "httpx>=0.25.0",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.4.0",
    "pylint>=2.17.0",
    "pydocstyle>=6.3.0",
    "autoflake>=2.2.0",
    "pyupgrade>=3.10.0",
    "locust>=2.17.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.23.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
]
monitoring = [
    "prometheus-client>=0.17.0",
    "grafana-api>=1.0.0",
]
integrations = [
    "slack-sdk>=3.22.0",
    "twilio>=8.9.0",
    "sendgrid>=6.10.0",
]

[project.urls]
Homepage = "https://github.com/bruno/streamleads"
Documentation = "https://streamleads.readthedocs.io"
Repository = "https://github.com/bruno/streamleads.git"
"Bug Tracker" = "https://github.com/bruno/streamleads/issues"
Changelog = "https://github.com/bruno/streamleads/blob/main/CHANGELOG.md"

[project.scripts]
streamleads = "app.cli:main"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | alembic/versions
  )/
)
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["app", "tests", "scripts", "dashboard"]
skip_glob = ["alembic/versions/*.py"]
known_first_party = ["app", "tests", "scripts", "dashboard"]
known_third_party = [
    "fastapi",
    "pydantic",
    "sqlalchemy",
    "alembic",
    "celery",
    "redis",
    "streamlit",
    "plotly",
    "pandas",
    "pytest",
    "httpx",
    "requests",
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = """
    -ra
    --strict-markers
    --strict-config
    --cov=app
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    --tb=short
    --asyncio-mode=auto
"""
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::ImportWarning",
    "ignore:.*unclosed.*:ResourceWarning",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "api: API tests",
    "database: Database tests",
    "redis: Redis tests",
    "celery: Celery tests",
    "auth: Authentication tests",
    "email: Email tests",
    "webhook: Webhook tests",
    "performance: Performance tests",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "tests.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(name)s: %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
    "*/site-packages/*",
    "*/alembic/versions/*",
    "*/migrations/*",
    "app/core/config.py",
    "app/main.py",
]
branch = true
parallel = true
concurrency = ["thread", "multiprocessing"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = true
sort = "Cover"
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
    "TYPE_CHECKING",
]
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
color_output = true
error_summary = true
pretty = true
namespace_packages = true
explicit_package_bases = true
files = ["app", "tests", "scripts"]
exclude = [
    "alembic/versions/",
    "build/",
    "dist/",
    ".venv/",
    "venv/",
]

[[tool.mypy.overrides]]
module = [
    "fastapi.*",
    "pydantic.*",
    "sqlalchemy.*",
    "alembic.*",
    "celery.*",
    "redis.*",
    "streamlit.*",
    "plotly.*",
    "pandas.*",
    "pytest.*",
    "httpx.*",
    "requests.*",
    "email_validator.*",
    "phonenumbers.*",
    "passlib.*",
    "python_jose.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "alembic/versions"]
skips = ["B101", "B601"]

# Pylint configuration
[tool.pylint.main]
load-plugins = [
    "pylint.extensions.check_elif",
    "pylint.extensions.bad_builtin",
    "pylint.extensions.docparams",
    "pylint.extensions.for_any_all",
    "pylint.extensions.set_membership",
    "pylint.extensions.code_style",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.typing",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.comparison_placement",
]
jobs = 0
persistent = true
safe-imports = true

[tool.pylint.messages_control]
disable = [
    "missing-docstring",
    "invalid-name",
    "line-too-long",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "fixme",
    "import-error",
    "no-name-in-module",
    "unused-import",
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 10
max-attributes = 15
max-bool-expr = 5
max-branches = 15
max-locals = 20
max-parents = 7
max-public-methods = 25
max-returns = 6
max-statements = 60
min-public-methods = 1

# Autoflake configuration
[tool.autoflake]
remove-all-unused-imports = true
remove-unused-variables = true
remove-duplicate-keys = true
expand-star-imports = true
ignore-init-module-imports = true

# Pydocstyle configuration
[tool.pydocstyle]
inherit = false
ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107"]
match = "(?!test_).*\.py"
match-dir = "(?!tests)[^\.].*"
convention = "google"

# Setuptools configuration
[tool.setuptools.packages.find]
where = ["."]  # list of folders that contain the packages (["src"] by default)
include = ["app*", "dashboard*", "scripts*"]  # package names should match these glob patterns (["*"] by default)
exclude = ["tests*", "docs*", "alembic*"]  # exclude packages matching these glob patterns (empty by default)
namespaces = false  # to disable scanning PEP 420 namespaces (true by default)

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json", "*.toml"]
"app" = ["py.typed"]

[tool.setuptools.exclude-package-data]
"*" = ["*.pyc", "__pycache__", "*.so", "*.dylib"]

# Ruff configuration (alternative to flake8)
[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
line-length = 88
target-version = "py311"
fix = true
show-fixes = true
show-source = true

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["B011", "B018"]
"alembic/versions/*.py" = ["E501", "F401", "F841"]

[tool.ruff.isort]
known-first-party = ["app", "tests", "scripts", "dashboard"]
known-third-party = [
    "fastapi",
    "pydantic",
    "sqlalchemy",
    "alembic",
    "celery",
    "redis",
    "streamlit",
    "plotly",
    "pandas",
    "pytest",
    "httpx",
    "requests",
]
split-on-trailing-comma = true