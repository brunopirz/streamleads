name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job de testes e qualidade de código
  test:
    name: Tests & Code Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: streamleads_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        ENVIRONMENT=test
        DEBUG=false
        SECRET_KEY=test-secret-key-for-ci
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/streamleads_test
        REDIS_URL=redis://localhost:6379/0
        CELERY_BROKER_URL=redis://localhost:6379/1
        CELERY_RESULT_BACKEND=redis://localhost:6379/2
        CORS_ORIGINS=["http://localhost:3000","http://localhost:8501"]
        API_HOST=0.0.0.0
        API_PORT=8000
        STREAMLIT_HOST=0.0.0.0
        STREAMLIT_PORT=8501
        EOF
    
    - name: Run database migrations
      run: |
        export $(cat .env.test | xargs)
        alembic upgrade head
    
    - name: Run linting with flake8
      run: |
        flake8 app tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run type checking with mypy
      run: |
        mypy app
    
    - name: Run security check with bandit
      run: |
        bandit -r app -f json -o bandit-report.json || true
        bandit -r app
    
    - name: Run tests with pytest
      run: |
        export $(cat .env.test | xargs)
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          htmlcov/
          bandit-report.json
          coverage.xml

  # Job de build das imagens Docker
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push API image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: api
        push: true
        tags: ${{ steps.meta.outputs.tags }}-api
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Dashboard image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: dashboard
        push: true
        tags: ${{ steps.meta.outputs.tags }}-dashboard
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Worker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: worker
        push: true
        tags: ${{ steps.meta.outputs.tags }}-worker
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de deploy para staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging-api.streamleads.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT || 22 }}
        script: |
          cd /opt/streamleads-staging
          git pull origin develop
          
          # Atualizar variáveis de ambiente
          echo "IMAGE_TAG=${{ needs.build.outputs.image-tag }}" >> .env
          
          # Deploy
          docker-compose -f docker-compose.staging.yml pull
          docker-compose -f docker-compose.staging.yml up -d
          
          # Aguardar serviços
          sleep 30
          
          # Verificar saúde
          curl -f http://localhost:8000/health || exit 1
    
    - name: Run staging tests
      run: |
        # Testes de integração contra staging
        curl -f https://staging-api.streamleads.com/health
        curl -f https://staging-dashboard.streamleads.com/_stcore/health
    
    - name: Notify staging deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: 'Staging deployment ${{ job.status }}'

  # Job de deploy para produção
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release'
    
    environment:
      name: production
      url: https://api.streamleads.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create deployment
      id: deployment
      uses: actions/github-script@v6
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Deploy to production',
            auto_merge: false,
            required_contexts: []
          });
          return deployment.data.id;
    
    - name: Set deployment status to in_progress
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.deployment.outputs.result }},
            state: 'in_progress',
            description: 'Deployment started'
          });
    
    - name: Deploy to production server
      id: deploy
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          cd /opt/streamleads
          
          # Backup antes do deploy
          ./scripts/backup.sh
          
          # Atualizar código
          git fetch origin
          git checkout ${{ github.event.release.tag_name }}
          
          # Atualizar variáveis de ambiente
          echo "IMAGE_TAG=${{ needs.build.outputs.image-tag }}" >> .env
          
          # Deploy usando script automatizado
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh
    
    - name: Run production health checks
      run: |
        # Aguardar deploy
        sleep 60
        
        # Verificar saúde dos serviços
        curl -f https://api.streamleads.com/health
        curl -f https://dashboard.streamleads.com/_stcore/health
        
        # Verificar métricas
        curl -f https://api.streamleads.com/metrics
    
    - name: Set deployment status to success
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.deployment.outputs.result }},
            state: 'success',
            description: 'Deployment successful',
            environment_url: 'https://api.streamleads.com'
          });
    
    - name: Set deployment status to failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.deployment.outputs.result }},
            state: 'failure',
            description: 'Deployment failed'
          });
    
    - name: Rollback on failure
      if: failure()
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          cd /opt/streamleads
          ./scripts/deploy.sh rollback
    
    - name: Notify production deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: 'Production deployment ${{ job.status }}'

  # Job de segurança
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: python

  # Job de limpeza
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Delete old packages
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: true