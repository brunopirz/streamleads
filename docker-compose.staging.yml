version: '3.8'

services:
  # Traefik - Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: streamleads-staging-traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.debug=true
      - --log.level=INFO
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-staging-certs:/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`staging-traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH}"
    networks:
      - streamleads-staging
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: streamleads-staging-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-staging-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - streamleads-staging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: streamleads-staging-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-staging-data:/data
    networks:
      - streamleads-staging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # API Backend
  api:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-streamleads}:${IMAGE_TAG:-latest}-api
    container_name: streamleads-staging-api
    restart: unless-stopped
    environment:
      - ENVIRONMENT=staging
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - CORS_ORIGINS=${CORS_ORIGINS}
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-staging.rule=Host(`staging-api.${DOMAIN}`)"
      - "traefik.http.routers.api-staging.tls=true"
      - "traefik.http.routers.api-staging.tls.certresolver=letsencrypt"
      - "traefik.http.services.api-staging.loadbalancer.server.port=8000"
      - "traefik.http.routers.api-staging.middlewares=api-staging-ratelimit"
      - "traefik.http.middlewares.api-staging-ratelimit.ratelimit.burst=100"
      - "traefik.http.middlewares.api-staging-ratelimit.ratelimit.average=50"
    networks:
      - streamleads-staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Streamlit Dashboard
  dashboard:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-streamleads}:${IMAGE_TAG:-latest}-dashboard
    container_name: streamleads-staging-dashboard
    restart: unless-stopped
    environment:
      - ENVIRONMENT=staging
      - API_BASE_URL=https://staging-api.${DOMAIN}
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - STREAMLIT_SERVER_ENABLE_CORS=false
      - STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=true
    depends_on:
      - api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard-staging.rule=Host(`staging-dashboard.${DOMAIN}`)"
      - "traefik.http.routers.dashboard-staging.tls=true"
      - "traefik.http.routers.dashboard-staging.tls.certresolver=letsencrypt"
      - "traefik.http.services.dashboard-staging.loadbalancer.server.port=8501"
    networks:
      - streamleads-staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Celery Worker
  worker:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-streamleads}:${IMAGE_TAG:-latest}-worker
    container_name: streamleads-staging-worker
    restart: unless-stopped
    environment:
      - ENVIRONMENT=staging
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=INFO
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - streamleads-staging
    healthcheck:
      test: ["CMD", "celery", "-A", "app.core.celery", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Celery Beat (Scheduler)
  beat:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-streamleads}:${IMAGE_TAG:-latest}-worker
    container_name: streamleads-staging-beat
    restart: unless-stopped
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      - ENVIRONMENT=staging
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=INFO
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - celery-staging-beat:/app/celerybeat-schedule
    networks:
      - streamleads-staging
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Flower - Celery Monitoring
  flower:
    image: mher/flower:2.0
    container_name: streamleads-staging-flower
    restart: unless-stopped
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - FLOWER_PORT=5555
      - FLOWER_BASIC_AUTH=${FLOWER_USER}:${FLOWER_PASSWORD}
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flower-staging.rule=Host(`staging-flower.${DOMAIN}`)"
      - "traefik.http.routers.flower-staging.tls=true"
      - "traefik.http.routers.flower-staging.tls.certresolver=letsencrypt"
      - "traefik.http.services.flower-staging.loadbalancer.server.port=5555"
    networks:
      - streamleads-staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Prometheus - Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: streamleads-staging-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-staging-data:/prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus-staging.rule=Host(`staging-prometheus.${DOMAIN}`)"
      - "traefik.http.routers.prometheus-staging.tls=true"
      - "traefik.http.routers.prometheus-staging.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus-staging.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus-staging.middlewares=auth"
    networks:
      - streamleads-staging
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Grafana - Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: streamleads-staging-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SERVER_DOMAIN=staging-grafana.${DOMAIN}
      - GF_SERVER_ROOT_URL=https://staging-grafana.${DOMAIN}
    volumes:
      - grafana-staging-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana-staging.rule=Host(`staging-grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana-staging.tls=true"
      - "traefik.http.routers.grafana-staging.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana-staging.loadbalancer.server.port=3000"
    networks:
      - streamleads-staging
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: streamleads-staging-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - streamleads-staging
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: streamleads-staging-backup
    restart: "no"
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_HOST=db
    volumes:
      - ./scripts/backup.sh:/backup.sh:ro
      - backup-staging-data:/backups
    networks:
      - streamleads-staging
    depends_on:
      - db
    profiles:
      - backup

volumes:
  postgres-staging-data:
    driver: local
  redis-staging-data:
    driver: local
  traefik-staging-certs:
    driver: local
  prometheus-staging-data:
    driver: local
  grafana-staging-data:
    driver: local
  celery-staging-beat:
    driver: local
  backup-staging-data:
    driver: local

networks:
  streamleads-staging:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16