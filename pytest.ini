[tool:pytest]
# Configuração do pytest para o projeto StreamLeads

# Diretórios de teste
testpaths = tests

# Padrões de arquivos de teste
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Marcadores personalizados
markers =
    unit: marca testes unitários
    integration: marca testes de integração
    e2e: marca testes end-to-end
    slow: marca testes que demoram para executar
    api: marca testes da API
    database: marca testes que usam banco de dados
    scoring: marca testes do sistema de scoring
    automation: marca testes das automações
    dashboard: marca testes do dashboard
    external: marca testes que dependem de serviços externos
    mock: marca testes que usam mocks
    parametrize: marca testes parametrizados

# Opções padrão
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=app
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --durations=10
    --color=yes
    -ra

# Configuração de cobertura
cov_config = .coveragerc

# Filtros de warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning
    ignore:.*unclosed.*:DeprecationWarning

# Configuração de logging durante os testes
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Configuração de captura de logs
log_capture = true
log_level = INFO
log_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_date_format = %Y-%m-%d %H:%M:%S

# Configuração para testes assíncronos
asyncio_mode = auto

# Timeout para testes (em segundos)
timeout = 300

# Configuração de fixtures
usefixtures = 

# Diretórios a serem ignorados
norecursedirs = 
    .git
    .tox
    dist
    build
    *.egg
    .venv
    venv
    env
    __pycache__
    .pytest_cache
    htmlcov
    .coverage
    node_modules
    .docker

# Configuração de coleta de testes
collect_ignore = [
    "setup.py",
    "conftest.py",
]

# Configuração de cache
cache_dir = .pytest_cache

# Configuração de xdist (execução paralela)
# Para usar: pytest -n auto
dist = worksteal

# Configuração de benchmark (se usando pytest-benchmark)
benchmark-only = false
benchmark-sort = mean
benchmark-group-by = func
benchmark-timer = time.perf_counter
benchmark-disable-gc = false
benchmark-skip = false

# Configuração de mock
mock_use_standalone_module = true

# Configuração de fixtures de banco de dados
database_url = sqlite:///test.db

# Configuração de fixtures de API
api_base_url = http://localhost:8000

# Configuração de fixtures de Redis
redis_url = redis://localhost:6379/1

# Configuração de fixtures de Celery
celery_broker_url = redis://localhost:6379/2
celery_result_backend = redis://localhost:6379/3

# Configuração de fixtures de email
email_backend = locmem

# Configuração de fixtures de storage
storage_backend = memory

# Configuração de fixtures de cache
cache_backend = dummy

# Configuração de fixtures de logging
logging_level = DEBUG

# Configuração de fixtures de timezone
timezone = UTC

# Configuração de fixtures de locale
locale = pt_BR.UTF-8

# Configuração de fixtures de random seed
random_seed = 42

# Configuração de fixtures de factory boy
factory_random_seed = 42

# Configuração de fixtures de faker
faker_seed = 42
faker_locale = pt_BR